import mongoose from "mongoose";

const shoppingListSchema = new mongoose.Schema(
  {
    // Reference to the original inventory item (if it exists)
    inventoryItem: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Inventory",
      required: false // Not required for manual-only items
    },
    
    // Core item details (duplicated for manual entries)
    name: {
      type: String,
      required: true,
      trim: true
    },
    quantity: {
      type: Number,
      required: true,
      min: 1
    },
    unit: {
      type: String,
      enum: ["kg", "liters", "pieces"],
      default: "pieces"
    },
    
    // Tracking fields
    isAutoGenerated: {
      type: Boolean,
      default: false // True for items added via inventory thresholds
    },
    isPurchased: {
      type: Boolean,
      default: false
    },
    priority: {
      type: String,
      enum: ["low", "medium", "high"],
      default: "medium"
    },
    
    // Additional user fields
    notes: {
      type: String,
      trim: true
    },
    category: {
      type: String,
      trim: true
    }
  },
  {
    timestamps: true,
    versionKey: false
  }
);

// Update inventory when shopping list item is marked as purchased
shoppingListSchema.post("findOneAndUpdate", async function(doc) {
  if (doc.isPurchased && doc.inventoryItem) {
    await mongoose.model("Inventory").findByIdAndUpdate(
      doc.inventoryItem,
      { 
        $inc: { quantity: doc.quantity },
        $set: { lastPurchased: new Date() },
        $inc: { purchaseFrequency: 1 }
      }
    );
  }
});

const ShoppingList = mongoose.model("ShoppingList", shoppingListSchema);

export default ShoppingList;