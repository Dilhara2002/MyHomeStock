import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ShoppingList = () => {
  const [items, setItems] = useState([]);
  const [inventory, setInventory] = useState([]);
  const [newItem, setNewItem] = useState({
    name: '',
    quantity: 1,
    unit: 'pieces',
    isManual: true
  });

  // API endpoints
  const API_URL = '/api/shopping-list';
  const INVENTORY_URL = '/api/inventory';

  // Styles
  const styles = {
    container: {
      maxWidth: '800px',
      margin: '0 auto',
      padding: '20px',
      fontFamily: 'Arial, sans-serif'
    },
    addForm: {
      display: 'flex',
      gap: '10px',
      marginBottom: '20px',
      flexWrap: 'wrap'
    },
    input: {
      padding: '8px',
      border: '1px solid #ddd',
      borderRadius: '4px'
    },
    button: {
      padding: '8px 16px',
      backgroundColor: '#4CAF50',
      color: 'white',
      border: 'none',
      borderRadius: '4px',
      cursor: 'pointer'
    },
    list: {
      listStyle: 'none',
      padding: '0'
    },
    listItem: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      padding: '10px',
      borderBottom: '1px solid #eee'
    },
    purchasedItem: {
      textDecoration: 'line-through',
      color: '#888'
    },
    autoBadge: {
      background: '#e3f2fd',
      color: '#1976d2',
      padding: '2px 6px',
      borderRadius: '10px',
      fontSize: '0.8em',
      marginLeft: '8px'
    },
    inventorySection: {
      marginTop: '40px',
      paddingTop: '20px',
      borderTop: '2px solid #eee'
    }
  };

  // Fetch data on mount
  useEffect(() => {
    const loadData = async () => {
      try {
        const [listResponse, inventoryResponse] = await Promise.all([
          axios.get(API_URL),
          axios.get(INVENTORY_URL)
        ]);
        setItems(listResponse.data);
        setInventory(inventoryResponse.data);
      } catch (error) {
        console.error("Failed to load data:", error);
      }
    };
    loadData();
  }, []);

  const handlePurchase = async (itemId) => {
    try {
      await axios.post(`${API_URL}/purchase/${itemId}`);
      const [listResponse, inventoryResponse] = await Promise.all([
        axios.get(API_URL),
        axios.get(INVENTORY_URL)
      ]);
      setItems(listResponse.data);
      setInventory(inventoryResponse.data);
    } catch (error) {
      console.error("Purchase failed:", error);
    }
  };

  const handleAddManualItem = async () => {
    try {
      await axios.post(`${API_URL}/manual`, newItem);
      setNewItem({
        name: '',
        quantity: 1,
        unit: 'pieces',
        isManual: true
      });
      const response = await axios.get(API_URL);
      setItems(response.data);
    } catch (error) {
      console.error("Add item failed:", error);
    }
  };

  const handleToggleAutoReplenish = async (inventoryId) => {
    try {
      await axios.post(`${API_URL}/toggle-auto/${inventoryId}`);
      const response = await axios.get(INVENTORY_URL);
      setInventory(response.data);
    } catch (error) {
      console.error("Toggle failed:", error);
    }
  };

  return (
    <div style={styles.container}>
      <h2>Shopping List</h2>
      
      {/* Add Manual Item Form */}
      <div style={styles.addForm}>
        <input
          type="text"
          placeholder="Item name"
          value={newItem.name}
          onChange={(e) => setNewItem({...newItem, name: e.target.value})}
          style={styles.input}
        />
        <input
          type="number"
          min="1"
          value={newItem.quantity}
          onChange={(e) => setNewItem({...newItem, quantity: e.target.value})}
          style={styles.input}
        />
        <select
          value={newItem.unit}
          onChange={(e) => setNewItem({...newItem, unit: e.target.value})}
          style={styles.input}
        >
          <option value="pieces">Pieces</option>
          <option value="kg">Kilograms</option>
          <option value="liters">Liters</option>
        </select>
        <button onClick={handleAddManualItem} style={styles.button}>
          Add Item
        </button>
      </div>

      {/* Shopping List Items */}
      <ul style={styles.list}>
        {items.map(item => (
          <li 
            key={item._id} 
            style={item.isPurchased ? {...styles.listItem, ...styles.purchasedItem} : styles.listItem}
          >
            <span>
              {item.name} - {item.quantity} {item.unit}
              {item.isAutoGenerated && <span style={styles.autoBadge}>Auto</span>}
            </span>
            {!item.isPurchased && (
              <button 
                onClick={() => handlePurchase(item._id)} 
                style={styles.button}
              >
                Mark Purchased
              </button>
            )}
          </li>
        ))}
      </ul>

      {/* Inventory Integration */}
      <div style={styles.inventorySection}>
        <h3>Add From Inventory</h3>
        <ul style={styles.list}>
          {inventory.filter(item => item.quantity <= item.threshold).map(item => (
            <li key={item._id} style={styles.listItem}>
              {item.name} (Low Stock: {item.quantity}/{item.threshold})
              <button 
                onClick={() => handleToggleAutoReplenish(item._id)}
                style={styles.button}
              >
                {item.isAutoAdded ? 'Disable Auto' : 'Enable Auto'}
              </button>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default ShoppingList;